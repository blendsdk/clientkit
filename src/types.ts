import { AxiosRequestConfig } from "axios";
import { EndpointHandler } from "./handler";

/**
 * Method signature of a request API generated by the `server_api` method
 */
export type TServerRequest<RequestType, ResponseType> = (request: RequestType) => Promise<ResponseType>;

/**
 * Interface for configuring a server api method
 *
 * @export
 * @interface IServerRequestConfig
 * @extends {AxiosRequestConfig}
 */
export interface IServerRequestConfig extends AxiosRequestConfig {
    /**
     * A class (not instance) of EndpointHandler
     *
     * @type {{ new (): EndpointHandler<any, any> }}
     * @memberof IServerRequestConfig
     */
    handler?: new () => EndpointHandler<any, any>;
    /**
     * Flag to signal the API to use a Authorization Bearer
     * token.
     *
     * If set to true "token" will be used to read the token
     * from local storage
     *
     * @type {(boolean | string)}
     * @memberof IServerRequestConfig
     */
    useToken?: boolean | string;
}
